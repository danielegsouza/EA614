# -*- coding: utf-8 -*-
"""efc2_248029.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sv1xPAVcOYOODFAu4N-l5HSPp6-QH2Ui
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

# Exercicio b

#Entrada x(t)

x = np.linspace(-6,6,10000)

onda = np.piecewise(x,[(x >= -1) & ( x < 0), (x <= 1) & ( x > 0),(x-4 >= -1) & ( x-4 < 0), (x-4<= 1) & ( x-4 > 0),(x+4 >= -1) & ( x+4 < 0), (x+4<= 1) & ( x+4 > 0)],[lambda x : -x, lambda x: x,lambda x : -(x -4) , lambda x: x-4,lambda x : -(x +4) , lambda x: x+4])

plt.plot(x,onda,label = 'x(t)')

t = np.linspace(-6, 6, 10000)
a = np.zeros_like(t)
w_0 = np.pi/2
a +=1/4

for n in range(-50,50): 
  if (n == 0):
    serie_fourier = 0
  else:
    serie_fourier = ((np.cos(n*w_0) + n*w_0*np.sin(n*w_0)-1)/(2*n**2*w_0**2))*np.e**((1j*n*w_0*t)) 
  a = a + serie_fourier

fig = plt.figure(figsize=(10,5))
plt.plot(t, onda, label="f(t)")
plt.plot(t, a, label= 'Série de Fourier com n = 1' , color = 'red')
plt.xlabel("t") 
plt.ylabel("x(t)") 
plt.legend(loc='lower left')
plt.show()

# Exercicio c

erro = 0
for i in range(len(t)): 
    erro += (((onda[i] - a[i])**2)/(len(t)))

print("Potencia do erro = ",erro)

# Exercicio d

w = []
a0 =[]
w0 = np.pi/2

def ak(n):
  if (n ==0):
    return 0  
  else:  
    return ((np.cos(n*w_0) + n*w_0*np.sin(n*w_0)-1)/(2*n**2*w_0**2))

for k in range(-50,50):
  w.append((np.pi/2)*k)
  a0.append(ak(k))

fig = plt.figure(figsize=(10,5))
plt.stem(w, np.abs(a0), label="|ak|")
plt.xlabel('w')
plt.ylabel('|ak|')
plt.legend(loc='upper left')
plt.show()

# Exercicio e

w = []
H=[]
wc = 1/(100*1e-3)


def resposta_freq(k):
  if (k ==0):
    return 0
  else: 
    return 1 /(1 -1j*(wc/(np.pi/2*k)))


for k in range(-50,50):
  w.append((np.pi/2)*k)
  H.append(resposta_freq(k))


fig = plt.figure(figsize=(10,5))
plt.stem( w, np.angle(H), label='Fase $\omega$')
plt.xlabel('w')
plt.ylabel('H(jw)')
plt.legend()
plt.show()

fig = plt.figure(figsize=(10,5))
plt.stem( w, np.abs(H), label = "|H(jw)|")
plt.xlabel('w')
plt.ylabel('H(jw)')
plt.legend()
plt.show()

#Exercicio f

tempo = np.linspace(-2.5, 2.5, 10000)
y = np.zeros_like(tempo)
w_0 = np.pi/2
a= 0

for i,t in enumerate(tempo):

  for n in range(-50,50): # Numero de componentes harmônicas 
    if (n == 0):

      a0 = 1/4

    else:
      a0 = (np.cos(n*w_0) + n*w_0*np.sin(n*w_0)-1)/(2*n**2*w_0**2)*np.e**((1j*n*w_0*t))

    a = a + a0*resposta_freq(n)
    
  y[i] = a
  a = 0

fig = plt.figure(figsize=(10,5))
plt.plot(tempo, y)
plt.xlabel("t") 
plt.ylabel("y(t)") 
plt.show()