# -*- coding: utf-8 -*-
"""efc3_248029.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CRUjKYAO5IO6dUmfolCSzdgVsPQXsmAQ
"""

import numpy as np
import matplotlib.pyplot as plt

#Função que calcula os coeficientes do polinomio de Chebyshev de maneira não-recursiva

def calcula_coeficientes(w,wc,n):

  Tn = np.zeros((w.size,))
  Tn[abs(w) < wc] = np.cos(n*np.arccos(w[abs(w) < wc] / wc))
  Tn[abs(w) >= wc] = np.cosh(n*np.arccosh(w[abs(w) >= wc] / wc))
  
  return Tn

#Exercicio a

# w = vetor w
# wc = frequência de corte
# n = ordem do filtro
# e = ganho na frequencia de corte 

def filtro_chebyshev(w,wc,n,e):
  Tn = calcula_coeficientes(w,wc,n)
  Habs = np.zeros(len(w))

  for i in range (len(w)):
    Habs[i] = 1/(np.sqrt(1+(e**2) * (Tn[i]**2)))

  return Habs

w = np.arange(0,40,0.02)
wc = 10  # rad/s
n = 3
e = 0.2

plt.subplots(figsize=(10,5))
plt.title ("Módulo do filtro de Chebyshev")
plt.xlabel("$\omega$ (rad/s)")
plt.ylabel("$|H_C(J\omega)|$")
plt.plot(w, filtro_chebyshev(w,wc,1,e), color = 'black', label = "$n=1$")
plt.plot(w, filtro_chebyshev(w,wc,2,e), color = 'green', label = "$n=2$")
plt.plot(w, filtro_chebyshev(w,wc,3,e), color = 'pink', label = "$n=3$")
plt.plot(w, filtro_chebyshev(w,wc,4,e), color = 'yellow', label = "$n=4$")
plt.plot(w, filtro_chebyshev(w,wc,5,e), color = 'purple', label = "$n=5$")
plt.axvline(x=10, ymin=0, ymax=1, linestyle='--',color='grey')
plt.legend()
plt.show()

#Exercicio b
n = 3
plt.subplots(figsize=(10,5))
plt.title("Módulo do filtro de Chebyshev")
plt.xlabel("$\omega$ (rad/s)")
plt.ylabel("$|H_C(J\omega)|$")
plt.plot(w, filtro_chebyshev(w,wc,n,0.1), color = 'black', label = "$\epsilon = 0.1$")
plt.plot(w, filtro_chebyshev(w,wc,n,0.3), color = 'green', label = "$\epsilon = 0.3$")
plt.plot(w, filtro_chebyshev(w,wc,n,0.5), color = 'pink', label = "$\epsilon = 0.5$")
plt.plot(w, filtro_chebyshev(w,wc,n,0.7), color = 'yellow', label = "$\epsilon = 0.7$")
plt.plot(w, filtro_chebyshev(w,wc,n,0.9), color = 'purple', label = "$\epsilon = 0.9$")
plt.axvline(x=10, ymin=0, ymax=1, linestyle='--', color='grey')
plt.legend(loc='lower left')
plt.show()

#Exercicio c

def filtro_butterworth(w,wc,n):

  resposta_modulo = 1/(np.sqrt(1+(w/wc)**(2*n)))
  
  return resposta_modulo


plt.subplots(figsize=(10,5))
plt.title("Módulo do filtro de Butterworth")
plt.xlabel("$\omega$ (rad/s)")
plt.ylabel("$|H_B(J\omega)|$")
plt.plot(w, filtro_butterworth(w,wc,1), color = 'black', label = "$n=1$")
plt.plot(w, filtro_butterworth(w,wc,2), color = 'green', label = "$n=2$")
plt.plot(w, filtro_butterworth(w,wc,3), color = 'pink', label = "$n=3$")
plt.plot(w, filtro_butterworth(w,wc,4), color = 'yellow', label = "$n=4$")
plt.plot(w, filtro_butterworth(w,wc,5), color = 'purple', label = "$n=5$")
plt.axvline(x=10, ymin=0, ymax=1, linestyle='--',color='grey')
plt.legend(loc='lower left')
plt.show()

# Exercicio d

wm = 5 

def transformada_fourrier(w,wc):
  Xjw= np.zeros(len(w))

  for i in range(len(w)):
    Xjw[i] = abs((2*np.sin((w[i]*np.pi)/wm))/w[i])

  return Xjw



plt.subplots(figsize=(10,5))
plt.title("Gráfico de $|X(j\omega)|$")
plt.xlabel("$\omega$ (rad/s)")
plt.ylabel("$|X(j\omega)|$")
plt.plot(w, transformada_fourrier(w, wc), color = 'black')
plt.axvline(x=5, ymin=0, ymax=1, linestyle='--',color='grey', label = "$\omega_m = 5$ rad/s")
plt.legend(loc='upper right')
plt.show()

#Exercicio e

def filtro_ideal(w,wc):
  Hideal = np.zeros(len(w))

  for i in range(len(w)):

    if abs(w[i]) <= wc:
      Hideal[i] = 1

    else:
     Hideal[i] = 0

  return Hideal



plt.subplots(figsize=(10,5))
plt.title("Módulo da resposta em frequência para diferentes tipos de filtro")
plt.xlabel("$\omega$ (rad/s)")
plt.ylabel("$|H(j\omega)|$")
plt.plot(w, filtro_ideal(w, wc), color = 'purple',label = "Filtro Ideal")
plt.plot(w,filtro_chebyshev(w,wc,3,0.9),color ='pink',label = "Filtro de Chebyshev")
plt.plot(w,filtro_butterworth(w,wc,2),color = 'red',label = "Filtro de Butterworth")
plt.axvline(x=10, ymin=0, ymax=1, linestyle='--',color='grey', label = "$\omega_c = 10$ rad/s")
plt.legend()
plt.show()

#Módulo dos espectros

def calcula_espectro(w,wc,X,H):
  Y = np.zeros(len(w))

  for i in range (len(w)):
    Y[i] = abs(X[i])*abs(H[i])

  return Y

hideal = filtro_ideal(w,wc)
hchebyshev = filtro_chebyshev(w,wc,3,0.9)
hbutterworth = filtro_butterworth(w,wc,2)
X = transformada_fourrier(w,wc)


plt.subplots(figsize=(10,5))
plt.title("Módulo do espectro da saída para diferentes tipos de filtro")
plt.xlabel("$\omega$ (rad/s)")
plt.ylabel("$|Y(J\omega)|$")
plt.plot(w, calcula_espectro(w,wc,X,hideal), color = 'purple',label = "Filtro Ideal")
plt.plot(w,calcula_espectro(w,wc,X,hchebyshev),color ='pink',label = "Filtro de Chebyshev")
plt.plot(w,calcula_espectro(w,wc,X,hbutterworth),color = 'red',label = "Filtro de Butterworth")
plt.axvline(x=10, ymin=0, ymax=1, linestyle='--',color='grey', label = "$\omega_c = 10$ rad/s")
plt.legend()
plt.show()